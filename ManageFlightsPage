package FlightManagementSystem;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ManageFlightsPage extends JFrame implements ActionListener {
    private Container container;
    private JLabel titleLabel;
    private JLabel flightNumberLabel;
    private JTextField flightNumberField;
    private JLabel flightDetailsLabel;
    private JTextField flightDetailsField;
    private JLabel priceLabel; // Updated to show price in INR
    private JTextField priceField; // Price field in INR
    private JButton addFlightButton;
    private JButton deleteFlightButton;
    private JButton backButton;
    private JTextArea flightsTextArea;
    private List<String> flights;

    public ManageFlightsPage() {
        setTitle("Manage Flights");
        setBounds(300, 90, 600, 500);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);

        container = getContentPane();
        container.setLayout(null);

        titleLabel = new JLabel("Manage Flights");
        titleLabel.setFont(new Font("Arial", Font.PLAIN, 20));
        titleLabel.setSize(200, 30);
        titleLabel.setLocation(200, 30);
        container.add(titleLabel);

        flightNumberLabel = new JLabel("Flight Number");
        flightNumberLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        flightNumberLabel.setSize(100, 20);
        flightNumberLabel.setLocation(50, 100);
        container.add(flightNumberLabel);

        flightNumberField = new JTextField();
        flightNumberField.setFont(new Font("Arial", Font.PLAIN, 15));
        flightNumberField.setSize(150, 20);
        flightNumberField.setLocation(200, 100);
        container.add(flightNumberField);

        flightDetailsLabel = new JLabel("Flight Details");
        flightDetailsLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        flightDetailsLabel.setSize(100, 20);
        flightDetailsLabel.setLocation(50, 150);
        container.add(flightDetailsLabel);

        flightDetailsField = new JTextField();
        flightDetailsField.setFont(new Font("Arial", Font.PLAIN, 15));
        flightDetailsField.setSize(150, 20);
        flightDetailsField.setLocation(200, 150);
        container.add(flightDetailsField);

        priceLabel = new JLabel("Price (INR)");
        priceLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        priceLabel.setSize(100, 20);
        priceLabel.setLocation(50, 200);
        container.add(priceLabel);

        priceField = new JTextField();
        priceField.setFont(new Font("Arial", Font.PLAIN, 15));
        priceField.setSize(150, 20);
        priceField.setLocation(200, 200);
        container.add(priceField);

        addFlightButton = new JButton("Add Flight");
        addFlightButton.setFont(new Font("Arial", Font.PLAIN, 15));
        addFlightButton.setSize(150, 20);
        addFlightButton.setLocation(50, 250);
        addFlightButton.addActionListener(this);
        container.add(addFlightButton);

        deleteFlightButton = new JButton("Delete Flight");
        deleteFlightButton.setFont(new Font("Arial", Font.PLAIN, 15));
        deleteFlightButton.setSize(150, 20);
        deleteFlightButton.setLocation(250, 250);
        deleteFlightButton.addActionListener(this);
        container.add(deleteFlightButton);

        backButton = new JButton("Back to Admin");
        backButton.setFont(new Font("Arial", Font.PLAIN, 15));
        backButton.setSize(150, 20);
        backButton.setLocation(450, 250);
        backButton.addActionListener(e -> {
            dispose();
            new AdminPage();
        });
        container.add(backButton);

        flightsTextArea = new JTextArea();
        flightsTextArea.setFont(new Font("Arial", Font.PLAIN, 15));
        flightsTextArea.setSize(500, 200);
        flightsTextArea.setLocation(50, 300);
        flightsTextArea.setEditable(false);
        container.add(flightsTextArea);

        loadFlights();

        setVisible(true);
    }

    private void loadFlights() {
        flights = new ArrayList<>();
        StringBuilder flightsList = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader("flights.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                flights.add(line);
                flightsList.append(line).append("\n");
            }
        } catch (IOException e) {
            flightsList.append("No flights available.");
            e.printStackTrace();
        }
        flightsTextArea.setText(flightsList.toString());
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == addFlightButton) {
            String flightNumber = flightNumberField.getText().trim();
            String flightDetails = flightDetailsField.getText().trim();
            String price = priceField.getText().trim(); // Get price field text

            if (!flightNumber.isEmpty() && !flightDetails.isEmpty() && !price.isEmpty()) {
                String flightInfo = flightNumber + ": " + flightDetails + ", Price: ₹" + price; // ₹ is the symbol for INR
                flights.add(flightInfo);
                updateFlightsFile();
                loadFlights();
                JOptionPane.showMessageDialog(this, "Flight Added Successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Please enter valid flight details and price", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (e.getSource() == deleteFlightButton) {
            String flightNumber = flightNumberField.getText().trim();
            if (!flightNumber.isEmpty()) {
                boolean flightFound = false;
                for (String flight : flights) {
                    if (flight.startsWith(flightNumber + ":")) {
                        flightFound = true;
                        flights.remove(flight);
                        updateFlightsFile();
                        loadFlights();
                        JOptionPane.showMessageDialog(this, "Flight Deleted Successfully!");
                        break;
                    }
                }
                if (!flightFound) {
                    JOptionPane.showMessageDialog(this, "Invalid Flight Number", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a flight number", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updateFlightsFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("flights.txt"))) {
            for (String flight : flights) {
                writer.write(flight);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating flights", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new ManageFlightsPage();
    }
}
