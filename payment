package FlightManagementSystem;







import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

public class PaymentGateway extends JFrame implements ActionListener {
    private Container container;
    private JLabel titleLabel;
    private JLabel cardNumberLabel;
    private JTextField cardNumberField;
    private JLabel priceLabel;
    private JButton payButton;
    private String flightNumber;
    private int price;

    public PaymentGateway(String flightNumber) {
        this.flightNumber = flightNumber;
        this.price = calculatePrice(flightNumber);

        setTitle("Payment Gateway");
        setBounds(300, 90, 500, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);

        container = getContentPane();
        container.setLayout(null);

        titleLabel = new JLabel("Payment Gateway");
        titleLabel.setFont(new Font("Arial", Font.PLAIN, 20));
        titleLabel.setSize(200, 30);
        titleLabel.setLocation(150, 30);
        container.add(titleLabel);

        cardNumberLabel = new JLabel("Card Number");
        cardNumberLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        cardNumberLabel.setSize(100, 20);
        cardNumberLabel.setLocation(50, 100);
        container.add(cardNumberLabel);

        cardNumberField = new JTextField();
        cardNumberField.setFont(new Font("Arial", Font.PLAIN, 15));
        cardNumberField.setSize(150, 20);
        cardNumberField.setLocation(200, 100);
        container.add(cardNumberField);

        priceLabel = new JLabel("Price: $" + price);
        priceLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        priceLabel.setSize(150, 20);
        priceLabel.setLocation(200, 150);
        container.add(priceLabel);

        payButton = new JButton("Pay");
        payButton.setFont(new Font("Arial", Font.PLAIN, 15));
        payButton.setSize(150, 20);
        payButton.setLocation(200, 200);
        payButton.addActionListener(this);
        container.add(payButton);

        setVisible(true);
    }

    private int calculatePrice(String flightNumber) {
        // Dummy pricing logic: price based on the flight number's hash code
        return Math.abs(flightNumber.hashCode()) % 500 + 100; // Prices between 100 and 600
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String cardNumber = cardNumberField.getText().trim();
        if (!cardNumber.isEmpty()) {
            // Save booking details
            saveBooking(flightNumber, price);
            JOptionPane.showMessageDialog(this, "Payment Successful!");
            dispose();
            new FlightManagementSystem.BookedTicketsPage();
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid card number", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveBooking(String flightNumber, int price) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("bookings.txt", true))) {
            writer.write("Flight: " + flightNumber + ", Price: $" + price);
            writer.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving booking", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new PaymentGateway("FL123");
    }
}
